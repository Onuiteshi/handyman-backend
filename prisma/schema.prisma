// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  ARTISAN
  ADMIN
}

enum AuthProvider {
  EMAIL
  PHONE
  OAUTH_GOOGLE
}

enum OTPType {
  SIGNUP
  LOGIN
  VERIFICATION
  PROFILE_SWITCH
}

enum ProfileType {
  PERSONAL
  BUSINESS
  FREELANCE
  CORPORATE
}

enum ProfileStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum ProfileSessionStatus {
  ACTIVE
  EXPIRED
  REVOKED
}

// Unified User table
model User {
  id                String       @id @default(uuid())
  email             String?      @unique
  phone             String?      @unique
  name              String
  dateOfBirth       DateTime?
  role              UserRole     @default(CUSTOMER)
  authProvider      AuthProvider @default(EMAIL)
  isEmailVerified   Boolean      @default(false)
  isPhoneVerified   Boolean      @default(false)
  profileComplete   Boolean      @default(false)
  
  // OAuth fields
  googleId          String?      @unique
  avatar            String?
  
  // Admin fields (only for admin users)
  password          String?      // Only for admin users
  
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  // Relations
  customer          Customer?
  artisan           Artisan?
  otpVerifications  OTPVerification[]
  
  // Profile management relations
  ownedProfiles     Profile[]
  profileMemberships ProfileMember[]
  profileSessions   ProfileSession[]
  sentInvitations   ProfileInvitation[] @relation("ProfileInvitationsSent")
  acceptedInvitations ProfileInvitation[] @relation("ProfileInvitationsAccepted")
  
  // Job relations
  jobs              Job[]        @relation("UserJobs")
  
  @@map("users")
}

// Customer-specific data
model Customer {
  id                String       @id @default(uuid())
  userId            String       @unique
  preferences       Json?        // Store customer preferences as JSON
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  // Relations
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("customers")
}

// Artisan-specific data
model Artisan {
  id                String       @id @default(uuid())
  userId            String       @unique
  skills            String[]     // Array of skill strings
  experience        Int          // Years of experience
  portfolio         String[]     // Array of portfolio URLs
  isProfileComplete Boolean      @default(false)
  bio               String?
  photoUrl          String?
  idDocumentUrl     String?
  isOnline          Boolean      @default(false)
  locationTracking  Boolean      @default(false)
  latitude          Float?
  longitude         Float?
  lastSeen          DateTime?
  averageRating     Float        @default(0.0) // Average rating from reviews
  serviceRadiusKm   Float        @default(10.0) // Service radius in kilometers
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  // Relations
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories        ArtisanServiceCategory[]
  
  // Job relations
  assignedJobs      Job[]        @relation("AssignedJobs")
  matchingLogs      JobMatchingLog[]
  
  @@map("artisans")
}

// OTP Management
model OTPVerification {
  id                String       @id @default(uuid())
  identifier        String       // email or phone
  otp               String       // 6-digit OTP
  type              OTPType
  expiresAt         DateTime
  attempts          Int          @default(0)
  isUsed            Boolean      @default(false)
  createdAt         DateTime     @default(now())
  
  // Relations
  userId            String?
  user              User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("otp_verifications")
}

// Profile Management
model Profile {
  id                String        @id @default(uuid())
  name              String        // Profile display name
  type              ProfileType   @default(PERSONAL)
  status            ProfileStatus @default(ACTIVE)
  description       String?       // Optional profile description
  avatar            String?       // Profile-specific avatar
  settings          Json?         // Profile-specific settings
  metadata          Json?         // Additional profile metadata
  
  // Profile owner (the main user account)
  ownerId           String
  owner             User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  
  // Profile members (users who have access to this profile)
  members           ProfileMember[]
  
  // Profile sessions
  sessions          ProfileSession[]
  
  // Profile invitations
  invitations       ProfileInvitation[]
  
  // Profile-specific data
  customerProfile   CustomerProfile?
  artisanProfile    ArtisanProfile?
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  @@map("profiles")
}

// Profile members (users who can access a profile)
model ProfileMember {
  id                String        @id @default(uuid())
  profileId         String
  userId            String
  role              UserRole      // Role within this specific profile
  permissions       Json?         // Profile-specific permissions
  isActive          Boolean       @default(true)
  joinedAt          DateTime      @default(now())
  
  // Relations
  profile           Profile       @relation(fields: [profileId], references: [id], onDelete: Cascade)
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([profileId, userId])
  @@map("profile_members")
}

// Profile sessions for authentication
model ProfileSession {
  id                String              @id @default(uuid())
  profileId         String
  userId            String
  token             String              @unique
  refreshToken      String              @unique
  status            ProfileSessionStatus @default(ACTIVE)
  expiresAt         DateTime
  lastActivityAt    DateTime            @default(now())
  ipAddress         String?
  userAgent         String?
  deviceInfo        Json?
  
  // Relations
  profile           Profile             @relation(fields: [profileId], references: [id], onDelete: Cascade)
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  @@map("profile_sessions")
}

// Profile invitations
model ProfileInvitation {
  id                String        @id @default(uuid())
  profileId         String
  invitedEmail      String?
  invitedPhone      String?
  invitedByUserId   String
  role              UserRole
  message           String?       // Optional invitation message
  expiresAt         DateTime
  isAccepted        Boolean       @default(false)
  acceptedAt        DateTime?
  acceptedByUserId  String?
  
  // Relations
  profile           Profile       @relation(fields: [profileId], references: [id], onDelete: Cascade)
  invitedBy         User          @relation("ProfileInvitationsSent", fields: [invitedByUserId], references: [id], onDelete: Cascade)
  acceptedBy        User?         @relation("ProfileInvitationsAccepted", fields: [acceptedByUserId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  @@map("profile_invitations")
}

// Profile-specific customer data
model CustomerProfile {
  id                String        @id @default(uuid())
  profileId         String        @unique
  preferences       Json?         // Profile-specific customer preferences
  billingAddress    Json?         // Profile-specific billing information
  paymentMethods    Json?         // Profile-specific payment methods
  serviceHistory    Json?         // Profile-specific service history
  
  // Relations
  profile           Profile       @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  @@map("customer_profiles")
}

// Profile-specific artisan data
model ArtisanProfile {
  id                String        @id @default(uuid())
  profileId         String        @unique
  skills            String[]      // Profile-specific skills
  experience        Int           // Profile-specific experience
  portfolio         String[]      // Profile-specific portfolio
  bio               String?       // Profile-specific bio
  photoUrl          String?       // Profile-specific photo
  idDocumentUrl     String?       // Profile-specific ID document
  isOnline          Boolean       @default(false)
  locationTracking  Boolean       @default(false)
  latitude          Float?
  longitude         Float?
  lastSeen          DateTime?
  hourlyRate        Float?        // Profile-specific hourly rate
  availability      Json?         // Profile-specific availability schedule
  
  // Relations
  profile           Profile       @relation(fields: [profileId], references: [id], onDelete: Cascade)
  categories        ArtisanProfileServiceCategory[]
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  @@map("artisan_profiles")
}

// Many-to-many relationship between Artisan Profiles and Service Categories
model ArtisanProfileServiceCategory {
  artisanProfileId  String
  categoryId        String
  createdAt         DateTime      @default(now())
  
  // Relations
  artisanProfile    ArtisanProfile @relation(fields: [artisanProfileId], references: [id], onDelete: Cascade)
  category          ServiceCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@id([artisanProfileId, categoryId])
  @@map("artisan_profile_service_categories")
}

// Service Categories (unchanged)
model ServiceCategory {
  id                String       @id @default(uuid())
  name              String       @unique
  description       String?
  artisans          ArtisanServiceCategory[]
  artisanProfiles   ArtisanProfileServiceCategory[]
  jobs              Job[]        // Jobs requesting this service
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  @@map("service_categories")
}

// Many-to-many relationship between Artisans and Service Categories
model ArtisanServiceCategory {
  artisanId         String
  categoryId        String
  specializationLevel Int          @default(1) // 1-5 scale
  createdAt         DateTime     @default(now())
  
  // Relations
  artisan           Artisan      @relation(fields: [artisanId], references: [id], onDelete: Cascade)
  category          ServiceCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@id([artisanId, categoryId])
  @@map("artisan_service_categories")
}

// Jobs table for service requests
model Job {
  id                String       @id @default(uuid())
  userId            String       // Customer who created the job
  serviceId         String       // Service category ID
  description       String
  photoUrls         String[]     // Array of photo URLs
  latitude          Float
  longitude         Float
  preferredTime     DateTime?
  status            JobStatus    @default(PENDING)
  estimatedCost     Float?       // Estimated cost range
  actualCost        Float?       // Final cost after completion
  assignedArtisanId String?      // Artisan assigned to the job
  completedAt       DateTime?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  // Relations
  user              User         @relation("UserJobs", fields: [userId], references: [id], onDelete: Cascade)
  service           ServiceCategory @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  assignedArtisan   Artisan?     @relation("AssignedJobs", fields: [assignedArtisanId], references: [id], onDelete: SetNull)
  matchingLogs      JobMatchingLog[]
  
  @@map("jobs")
}

// Job matching logs for analytics and learning
model JobMatchingLog {
  id                String       @id @default(uuid())
  jobId             String
  artisanId         String
  matchScore        Float        // Calculated match score
  distanceKm        Float        // Distance between job and artisan
  rating            Float        // Artisan's rating at time of matching
  specializationLevel Int        // Artisan's specialization level
  isSelected        Boolean      @default(false) // Whether artisan was selected for notification
  notificationSent  Boolean      @default(false)
  notificationSentAt DateTime?
  createdAt         DateTime     @default(now())
  
  // Relations
  job               Job          @relation(fields: [jobId], references: [id], onDelete: Cascade)
  artisan           Artisan      @relation(fields: [artisanId], references: [id], onDelete: Cascade)
  
  @@map("job_matching_logs")
}

// Job status enum
enum JobStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  EXPIRED
}
