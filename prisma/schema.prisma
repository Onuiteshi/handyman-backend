// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  ARTISAN
  ADMIN
}

enum AuthProvider {
  EMAIL
  PHONE
  OAUTH_GOOGLE
}

enum OTPType {
  SIGNUP
  LOGIN
  VERIFICATION
}

// Unified User table
model User {
  id                String       @id @default(uuid())
  email             String?      @unique
  phone             String?      @unique
  name              String
  dateOfBirth       DateTime?
  role              UserRole     @default(CUSTOMER)
  authProvider      AuthProvider @default(EMAIL)
  isEmailVerified   Boolean      @default(false)
  isPhoneVerified   Boolean      @default(false)
  profileComplete   Boolean      @default(false)
  
  // OAuth fields
  googleId          String?      @unique
  avatar            String?
  
  // Admin fields (only for admin users)
  password          String?      // Only for admin users
  
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  // Relations
  customer          Customer?
  artisan           Artisan?
  otpVerifications  OTPVerification[]
  
  @@map("users")
}

// Customer-specific data
model Customer {
  id                String       @id @default(uuid())
  userId            String       @unique
  preferences       Json?        // Store customer preferences as JSON
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  // Relations
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("customers")
}

// Artisan-specific data
model Artisan {
  id                String       @id @default(uuid())
  userId            String       @unique
  skills            String[]     // Array of skill strings
  experience        Int          // Years of experience
  portfolio         String[]     // Array of portfolio URLs
  isProfileComplete Boolean      @default(false)
  bio               String?
  photoUrl          String?
  idDocumentUrl     String?
  isOnline          Boolean      @default(false)
  locationTracking  Boolean      @default(false)
  latitude          Float?
  longitude         Float?
  lastSeen          DateTime?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  // Relations
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories        ArtisanServiceCategory[]
  
  @@map("artisans")
}

// OTP Management
model OTPVerification {
  id                String       @id @default(uuid())
  identifier        String       // email or phone
  otp               String       // 6-digit OTP
  type              OTPType
  expiresAt         DateTime
  attempts          Int          @default(0)
  isUsed            Boolean      @default(false)
  createdAt         DateTime     @default(now())
  
  // Relations
  userId            String?
  user              User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("otp_verifications")
}

// Service Categories (unchanged)
model ServiceCategory {
  id                String       @id @default(uuid())
  name              String       @unique
  description       String?
  artisans          ArtisanServiceCategory[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  @@map("service_categories")
}

// Many-to-many relationship between Artisans and Service Categories
model ArtisanServiceCategory {
  artisanId         String
  categoryId        String
  createdAt         DateTime     @default(now())
  
  // Relations
  artisan           Artisan      @relation(fields: [artisanId], references: [id], onDelete: Cascade)
  category          ServiceCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@id([artisanId, categoryId])
  @@map("artisan_service_categories")
}
